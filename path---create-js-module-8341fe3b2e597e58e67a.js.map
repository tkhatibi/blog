{"version":3,"sources":["webpack:///path---create-js-module-8341fe3b2e597e58e67a.js","webpack:///./.cache/json/create-js-module.json"],"names":["webpackJsonp","509","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,aAAAC,OAAA,eAA4CC,gBAAmBC,GAAA,wJAAAC,KAAA,+jcAAAC,aAA8/cL,MAAA,6BAAAM,KAAA,mBAA8DC,aAAgBC,KAAA,qBAAAC,UAAwCC,QAAUF,KAAA,iBAAuBH,aAAgBL,MAAA,eAAsBW,MAAA","file":"path---create-js-module-8341fe3b2e597e58e67a.js","sourcesContent":["webpackJsonp([127523925242981],{\n\n/***/ 509:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"تورج خطیبی\",\"author\":\"تورج خطیبی\"}},\"markdownRemark\":{\"id\":\"/media/tooraj/0AD25B25D25B1473/Users/2raj/Documents/Programming/+projects/blog/src/pages/create-js-module/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>چند وقت پیش نیاز بود یه ماژول جاواسکریپتی برای تبدیل متن عربی به فارسی بنویسم،\\nکه نتیجه‌ش شد\\n<a href=\\\"https://www.npmjs.com/package/arabic-to-persian\\\">arabic-to-persian</a>.\\nماژول فوق‌العاده ساده‌ایه،\\nولی چند تا چیز خوب باهاش یاد گرفتم،\\nکه چون دوست دارم کامیت‌های ماژول بعدیم مرتب‌تر باشه،\\nباید ترتیب کارها رو برای خودم مستند می‌کردم.\\nپس شد آنچه شد.</p>\\n<h2>دور زدن config ها</h2>\\n<p>در فرآیند توسعه (خواه ماژول، خواه یک اپلیکیشن) ابزارهایی داریم تحت عنوان\\ntask runner\\nکه برای خودکارسازی کارهای روتین، حوصله‌سربر و از زیردست‌دررو استفاده می‌شن.\\nعموما این تسک‌رانرها با جاواسکریپت نوشته شدند،\\nولی می‌تونید در هر پروژه‌ای با هر زبان و فریم‌ورکی ازشون استفاده کنید.\\ngrunt و\\ngulp\\nنمونه‌ای از این ابزارها هستند.\\nبا اومدن node و npm نقش این ابزارها کمتر شد،\\nچرا که خیلی از این کارها رو npm scripts هم برای توسعه‌دهنده‌ها انجام می‌ده.\\nاما این کارهای روتین مثلا یعنی چه کارهایی؟</p>\\n<ul>\\n<li>اجرای تست‌ها قبل از هر کامیت</li>\\n<li>تهیه گزارش تست‌ها</li>\\n<li>بررسی و یکپارچه‌سازی استایل کدها قبل از هر کامیت</li>\\n<li>یکپارچه‌سازی عنوان و متن کامیت‌ها</li>\\n<li>ساخت نسخه‌های مختلف برای پلتفرم‌های مختلف</li>\\n<li>بهینه‌سازی نسخه‌ها</li>\\n<li>انتشار نسخه‌ها</li>\\n<li>تهیه مستندات</li>\\n<li>انتشار مستندات</li>\\n<li>تعیین شماره نسخه بعدی نرم‌افزار طبق <a href=\\\"https://semver.org\\\">semver</a></li>\\n<li>ضمیمه تغییرات هر نسخه به همراه commit مربوطه، issue مربوطه و …</li>\\n<li>و الی ماشالله</li>\\n</ul>\\n<p><img src=\\\"/etc-722330625a8a4793c08b5695efab52d0.gif\\\" alt=\\\"etc\\\"></p>\\n<p>خبر بد اینه که باید به task runner بفهمونید چه کارهایی انجام بده\\nو این خودش مستلزم کانفیگ پلاگین‌ها و ابزارهای دیگه‌ایه\\nکه اگر نگم انرژی‌ای که ازتون می‌گیره\\nبیشتر از توسعه خود ماژول نیست،\\nکم‌تر هم نیست.</p>\\n<p>و خبر خوب اینکه\\n<a href=\\\"https://github.com/alexjoverm/typescript-library-starter\\\">typescript-library-starter</a>\\nاین کانفیگ‌ها رو براتون انجام داده.\\nمن در ادامه پست با این boilerplate کار می‌کنم،\\nتا با هم کانفیگ‌ها رو دور بزنیم،\\nو روی ابزارهای مورد نیازمون تمرکز کنیم.\\nطبیعتا وقتی کاربرد این ابزارها رو یاد بگیرید،\\nدیگه محدود به این boilerplate نخواهید بود\\nو می‌تونید بر حسب نیاز از این ابزارها در پروژه‌های دیگه استفاده بکنید یا نکنید.</p>\\n<p><strong>سلب مسئولیت: کانفیگ‌ها در جاواسکریپت به سمت تموم شدن میل می‌کنن، ولی تموم نمی‌شن.</strong></p>\\n<p>اما چرا تایپ‌اسکریپت؟\\nمگه عنوان پست <strong>ایجاد ماژول‌های جاواسکریپت</strong> نبود؟\\nخب این سه تا علت داره:</p>\\n<ul>\\n<li>\\n<p>اول اینکه خدعه کردم.</p>\\n</li>\\n<li>\\n<p>دوم اینکه بنده از این جاواسکریپت خیلی بدم میاد.</p>\\n</li>\\n<li>\\n<p>و در آخر اینکه خب تایپ‌اسکریپت همون جاواسکریپت سروسامون‌یافته‌تر هست.\\nمنتها به خاطر استاتیک‌تایپ بودنش\\nIDE ها می‌تونن با نمایش پیشنهادها و نوع پارامترهای مجاز،\\nدر روند توسعه کمک‌تون کنند،\\nکه خود این مسئله منجر به کاهش خطاها در زمان اجرا،\\nساختار منطقی‌تر، کدهای خواناتر و نگهداری ساده‌تر میشه.\\nجدای از تمام برتری‌های فنی،\\nبرنامه‌نویسی با تایپ‌اسکریپت لذت‌بخش‌تر هم هست.\\nپس اگر یک هفته برای یادگیری تایپ‌اسکریپت کنار بذارید،\\nبه خودتون،\\nسایر مشارکت‌کننده‌ها،\\nتوسعه‌دهنده‌هایی که از کتابخا‌نه‌تون استفاده می‌کنند،\\nو جامعه بشریت کمک بزرگی کردید.</p>\\n</li>\\n</ul>\\n<h2>راه‌اندازی پروژه</h2>\\n<ul>\\n<li>\\n<p>اول به\\n<a href=\\\"https://github.com/new\\\">اینجا</a>\\nبرید و یه مخزن جدید بسازید.\\nبهتره نام مخزن بصورت <code class=\\\"language-text\\\">kebab-case.js</code> باشه.</p>\\n</li>\\n<li>\\n<p>دستورهای زیر رو به ترتیب اجرا کنید،\\nو وقتی ازتون نام پروژه پرسیده شد،\\nپسوند <code class=\\\"language-text\\\">js</code> رو وارد نکنید:</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">git clone https://github.com/alexjoverm/typescript-library-starter.git YOUR_REPOSITORY\\ncd YOUR_REPOSITORY\\nnpm install\\ngit remote set-url origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git</code></pre>\\n      </div>\\n<ul>\\n<li>الان می‌تونید اولین کامیت خودتون رو ثبت کنید.\\nولی با یه راه باحال‌تر اینکار رو انجام بدید:</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">git add .\\nnpm run commit</code></pre>\\n      </div>\\n<p>  سوال اول مربوط به نوع تغییرات هست.</p>\\n<p>  سوال دوم از شما می‌خواد مشخص کنید که این تغییرات مرتبط با کدوم فرآیند، پلتفرم، وابستگی،‌ کامپوننت یا … پروژه‌ست.</p>\\n<p>  سوال سوم و چهارم به ترتیب شرح خلاصه و مفصل تغییرات شماست.</p>\\n<p>  سوال پنجم مربوط به\\n<a href=\\\"https://en.wiktionary.org/wiki/breaking_change\\\">breaking change</a>\\nهای پروژه‌ست.\\nتغییراتی که در این کامیت منجر به ناسازگاری با نسخه‌های قبلی شده‌اند رو شرح بدید.\\nاما اگر\\n<a href=\\\"https://fa.wikipedia.org/wiki/%D8%B3%D8%A7%D8%B2%DA%AF%D8%A7%D8%B1%DB%8C_%D8%B9%D9%82%D8%A8%D8%B1%D9%88\\\">backward compatible</a>\\nبود جوابش رو ندید.</p>\\n<p>  و در سوال آخر اگر این کامیت برای بستن issue خاصی ثبت می‌شه\\nشماره issue مربوطه رو با فرمت مثلا <code class=\\\"language-text\\\">#64</code> ذکر کنید.</p>\\n<p>  حالا ببینید محتوای کامیت تولید شده چی هست:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">git log</code></pre>\\n      </div>\\n<p>  از این به بعد کامیت‌های شما و بقیه مشارکت‌کننده‌ها استایل مشترکی خواهند داشت.\\nو شاید باورتون نشه، ولی این کمترین کاری هست که\\n<a href=\\\"http://commitizen.github.io/cz-cli/\\\"><code class=\\\"language-text\\\">commitizen</code></a>\\nداره براتون انجام می‌ده.\\nبا وظیفه مهم‌ترش وقتی آشنا می‌شید،\\nکه <code class=\\\"language-text\\\">semantic-release</code> آماده به کار شده باشه.\\nپس اندکی صبر، اون قسمتش نزدیکست.</p>\\n<ul>\\n<li>\\n<p><a href=\\\"https://semantic-release.gitbooks.io/semantic-release/\\\"><code class=\\\"language-text\\\">semantic-release</code></a>\\nکامیت‌های منتشرنشده پروژه شما رو می‌خونه،\\nطبق مقادیری که ‍‍<code class=\\\"language-text\\\">commitizen</code> به کمک\\n<a href=\\\"https://github.com/conventional-changelog/conventional-changelog\\\"><code class=\\\"language-text\\\">conventional-changelog</code></a>\\nبه متن این کامیت‌ها اضافه کرده،\\nتغییرات <code class=\\\"language-text\\\">major</code> و <code class=\\\"language-text\\\">manor</code> و <code class=\\\"language-text\\\">patch</code> رو تشخیص می‌ده،\\nگزارش تغییرات نسخه جدید رو آماده می‌کنه،\\nو در آخر نتیجه رو نشونتون می‌ده.</p>\\n<p>این بود وظیفه مهم‌تر <code class=\\\"language-text\\\">commitizen</code>.</p>\\n</li>\\n</ul>\\n<p><img src=\\\"/setup-933c145ddbb62713d32afb8cf0de4de6.gif\\\" alt=\\\"setup\\\"></p>\\n<p>  از اونجایی که برای استفاده از\\n<code class=\\\"language-text\\\">semantic-release</code>\\nو انتشار مستندات\\nباید آدرس مخزن پروژه تعریف شده باشه،\\nفایل <code class=\\\"language-text\\\">package.json</code> رو باز کنید و در قسمت <code class=\\\"language-text\\\">git.url</code> آدرس\\n<code class=\\\"language-text\\\">https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git</code>\\nرو وارد کنید.</p>\\n<p>  اگر از ویندوز استفاده می‌کنید، قبل از دستورهای بعدی این دستور رو اجرا کنید:\\n(من امکان تست این مورد رو نداشتم و صرفا چون در\\n<a href=\\\"https://github.com/alexjoverm/typescript-library-starter#automatic-releases\\\">مستندات</a>\\nذکر شده بود، این رو اضافه کردم)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm install --global --production windows-build-tools</code></pre>\\n      </div>\\n<p>  دستورات زیر رو به ترتیب اجرا کنید (حتی شما یونیکسی عزیز)،\\nو وقتی ازتون پرسید <code class=\\\"language-text\\\">travis.yml</code> رو ایجاد کنه یا نه،\\n<code class=\\\"language-text\\\">NO</code> رو انتخاب کنید، چون زحمت کانفیگ این فایل از قبل کشیده شده.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm run semantic-release-prepare\\nnpm install -g semantic-release-cli\\nsemantic-release-cli setup</code></pre>\\n      </div>\\n<p>  با دستور اول دو تا <code class=\\\"language-text\\\">git hook</code> جدید به لیست اسکریپت‌های <code class=\\\"language-text\\\">package.json</code> اضافه می‌شن.\\n<code class=\\\"language-text\\\">prepush</code> که قبل از هر پوش صحت build و پوشش تست‌ها و استایل کدها رو بررسی می‌کنه\\nتا ضمانت کنه تغییرات شما منجر به fail شدن فرآیند ساخت نمی‌شه،\\nو <code class=\\\"language-text\\\">commitmsg</code> که به شما اجازه اجرای <code class=\\\"language-text\\\">git commit</code> رو نمی‌ده و\\nبه جاش <code class=\\\"language-text\\\">npm run commit</code> رو بهتون پیشنهاد می‌ده.</p>\\n<ul>\\n<li>\\n<p><a href=\\\"https://travis-ci.org/\\\">Travis CI</a>\\nابزاری برای خودکارسازی فرآیندهای\\nتست، ساخت و انتشار پروژه هست.\\nبرای فعال‌سازی CI پروژه\\n<a href=\\\"https://travis-ci.org/profile/\\\">اینجا</a>\\nبرید و سوییچ مخزن‌تون رو روشن کنید.</p>\\n<p>بعد به\\n<a href=\\\"https://github.com/settings/tokens\\\">اینجا</a>\\nبرید و یک توکن جدید ایجاد کنید.\\nدقت کنید که در قسمت <code class=\\\"language-text\\\">Select scopes</code> حتما <code class=\\\"language-text\\\">repo</code> و مشتقاتش انتخاب شده باشند.\\nاین توکن دیگه به شما نشون داده نمی‌شه،\\nپس در حفظ و نگهداری توکن کوشا باشید و اون رو در جایی امن نگه‌داری کنید.\\nطبیعتا این جای امن داخل پروژه نخواهد بود.</p>\\n<p>برای فعالسازی <code class=\\\"language-text\\\">semantic-release</code> به یه توکن <code class=\\\"language-text\\\">npm</code> هم نیاز دارید.\\nاگر هنوز عضو سایت <code class=\\\"language-text\\\">npm</code> نیستید از\\n<a href=\\\"https://www.npmjs.com/signup\\\">اینجا</a>\\nمی‌تونید ثبت‌نام کنید.\\nبعد دستور زیر رو اجرا کنید\\nو برای توکن ایجاد شده، همون مواردی که برای توکن گیت‌هاب اشاره کردم رو عینا رعایت کنید.</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm token create</code></pre>\\n      </div>\\n<p>  بعد به آدرس\\n<code class=\\\"language-text\\\">https://travis-ci.org/YOUR_USERNAME/YOUR_REPOSITORY/settings</code>\\nبرید و در قسمت <code class=\\\"language-text\\\">Environment Variables</code>\\nمقدار توکن گیت‌هاب رو با عنوان <code class=\\\"language-text\\\">GH_TOKEN</code> به لیست متغیرها اضافه کنید.\\nهمین کار رو مجددا برای توکن <code class=\\\"language-text\\\">npm</code> و این‌بار با عنوان <code class=\\\"language-text\\\">NPM_TOKEN</code> تکرار کنید.\\nحواستون باشه سوییچ ‍‍‍<code class=\\\"language-text\\\">Display value in build log</code> در هر دو مورد خاموش باشه،\\nچرا که درغیراینصورت اون حفظ و نگه‌داری‌ای که بهش اشاره شد به طور کامل نقض می‌شه.</p>\\n<p>  از این به بعد با هربار push و pull request،\\nتراویس وظایفی که در <code class=\\\"language-text\\\">travis.yml</code> تعریف شده رو براتون انجام می‌ده،\\nکارهایی مثل تست و به‌روزرسانی coverage و مستندات پروژه.\\nاگر نیاز بود وظایف دیگه‌ای هم به این لیست اضافه شه، به\\n<a href=\\\"https://docs.travis-ci.com/\\\">مستندات تراویس</a>\\nمراجعه کنید.</p>\\n<p>  برای اینکه نتیجه آخرین اجرای CI هم همیشه در معرض دید باشه،\\nبهتره که برچسب build رو به <code class=\\\"language-text\\\">README.md</code> پروژه اضافه کنید:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token title important\\\"><span class=\\\"token punctuation\\\">#</span> PROJECT_NAME</span>\\n\\n[![Build Status](https://travis-ci.org/YOUR<span class=\\\"token italic\\\"><span class=\\\"token punctuation\\\">_</span>USERNAME/YOUR<span class=\\\"token punctuation\\\">_</span></span>REPOSITORY.svg?branch=master)](https://travis-ci.org/YOUR<span class=\\\"token italic\\\"><span class=\\\"token punctuation\\\">_</span>USERNAME/YOUR<span class=\\\"token punctuation\\\">_</span></span>REPOSITORY)\\n</code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p><code class=\\\"language-text\\\">coveralls</code> هم ابزاری برای رصد کردن کیفیت کلی پروژه هست،\\nو برای پروژه‌های متن‌باز رایگانه.\\nاگر هنوز عضو سایتش نیستید، از\\n<a href=\\\"https://coveralls.io/sign-up\\\">اینجا</a>\\nمی‌تونید ثبت‌نام کنید.</p>\\n<p>برای فعال‌سازی coverage پروژه\\n<a href=\\\"https://coveralls.io/repos/new\\\">اینجا</a>\\nبرید و سوییچ مخزن نگهدارنده پروژه رو روشن کنید.</p>\\n<p>و در آخر به برچسب build که در قدم قبلی به <code class=\\\"language-text\\\">README.md</code> اضافه کردید،\\nبرچسب coverage رو هم اضافه کنید:</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">[![Coverage Status](https://coveralls.io/repos/github/YOUR<span class=\\\"token italic\\\"><span class=\\\"token punctuation\\\">_</span>USERNAME/YOUR<span class=\\\"token punctuation\\\">_</span></span>REPOSITORY/badge.svg?branch=master)](https://coveralls.io/github/YOUR<span class=\\\"token italic\\\"><span class=\\\"token punctuation\\\">_</span>USERNAME/YOUR<span class=\\\"token punctuation\\\">_</span></span>REPOSITORY?branch=master)\\n</code></pre>\\n      </div>\\n<ul>\\n<li>اگر به ویژگی‌های فانکشنال مثل <code class=\\\"language-text\\\">Promise</code> در کتابخانه‌تون نیاز داشتید،\\nمی‌تونید از <code class=\\\"language-text\\\">polyfill</code> هایی مثل\\n<a href=\\\"https://github.com/zloirock/core-js\\\"><code class=\\\"language-text\\\">core-js</code></a>\\nاستفاده کنید. برای نصب دستور زیر رو اجرا کنید:</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm i -D core-js</code></pre>\\n      </div>\\n<p>  و برای استفاده بالای <code class=\\\"language-text\\\">entry script</code> (فایلی که برنامه از اون شروع می‌شه) کتابخانه،\\n<code class=\\\"language-text\\\">polyfill</code> های مورد نیازتون رو <code class=\\\"language-text\\\">import</code> کنید:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"core-js/fn/array/find\\\"</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"core-js/fn/string/includes\\\"</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"core-js/fn/promise\\\"</span>\\n</code></pre>\\n      </div>\\n<h2>چند تا نکته</h2>\\n<ul>\\n<li>\\n<p>به آدرس <code class=\\\"language-text\\\">https://YOUR_USERNAME.github.io/YOUR_REPOSITORY</code> برید\\nو از دیدن مستنداتی که\\n<a href=\\\"http://typedoc.org/\\\"><code class=\\\"language-text\\\">typedoc</code></a>\\nبراتون ایجاد کرده لذت ببرید.</p>\\n</li>\\n<li>\\n<p>اگر کتابخانه شما وابسته به ماژولی از نوع <code class=\\\"language-text\\\">peerDependeny</code>\\n(ماژولی که لازم نیست در خروجی نهایی <code class=\\\"language-text\\\">import</code> بشه)\\nبود،\\nفایل <code class=\\\"language-text\\\">rollup.config.js</code> رو باز کنید و نام اون ماژول رو به آرایه <code class=\\\"language-text\\\">external</code> اضافه کنید.</p>\\n</li>\\n<li>\\n<p>تا می‌تونید از نصب وابستگی‌های پروژه به صورت <code class=\\\"language-text\\\">global</code> پرهیز کنید،\\nو کامندهای مرتبط با هر ماژول رو به <code class=\\\"language-text\\\">npm scripts</code> اضافه کنید،\\nاینجوری مشارکت برای سایر توسعه‌دهنده‌ها راحت‌تر می‌شه.</p>\\n</li>\\n</ul>\\n<h2>انتشار کتابخانه</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm publish</code></pre>\\n      </div>\\n<p><img src=\\\"/publish-9c5b49646e9365d80fb154f571043eb8.gif\\\" alt=\\\"publish\\\"></p>\",\"frontmatter\":{\"title\":\"ایجاد ماژول‌های جاواسکریپت\",\"date\":\"June 02, 2018\"}}},\"pathContext\":{\"slug\":\"/create-js-module/\",\"previous\":{\"fields\":{\"slug\":\"/hello-world/\"},\"frontmatter\":{\"title\":\"سلام دنیا!\"}},\"next\":false}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---create-js-module-8341fe3b2e597e58e67a.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"تورج خطیبی\",\"author\":\"تورج خطیبی\"}},\"markdownRemark\":{\"id\":\"/media/tooraj/0AD25B25D25B1473/Users/2raj/Documents/Programming/+projects/blog/src/pages/create-js-module/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>چند وقت پیش نیاز بود یه ماژول جاواسکریپتی برای تبدیل متن عربی به فارسی بنویسم،\\nکه نتیجه‌ش شد\\n<a href=\\\"https://www.npmjs.com/package/arabic-to-persian\\\">arabic-to-persian</a>.\\nماژول فوق‌العاده ساده‌ایه،\\nولی چند تا چیز خوب باهاش یاد گرفتم،\\nکه چون دوست دارم کامیت‌های ماژول بعدیم مرتب‌تر باشه،\\nباید ترتیب کارها رو برای خودم مستند می‌کردم.\\nپس شد آنچه شد.</p>\\n<h2>دور زدن config ها</h2>\\n<p>در فرآیند توسعه (خواه ماژول، خواه یک اپلیکیشن) ابزارهایی داریم تحت عنوان\\ntask runner\\nکه برای خودکارسازی کارهای روتین، حوصله‌سربر و از زیردست‌دررو استفاده می‌شن.\\nعموما این تسک‌رانرها با جاواسکریپت نوشته شدند،\\nولی می‌تونید در هر پروژه‌ای با هر زبان و فریم‌ورکی ازشون استفاده کنید.\\ngrunt و\\ngulp\\nنمونه‌ای از این ابزارها هستند.\\nبا اومدن node و npm نقش این ابزارها کمتر شد،\\nچرا که خیلی از این کارها رو npm scripts هم برای توسعه‌دهنده‌ها انجام می‌ده.\\nاما این کارهای روتین مثلا یعنی چه کارهایی؟</p>\\n<ul>\\n<li>اجرای تست‌ها قبل از هر کامیت</li>\\n<li>تهیه گزارش تست‌ها</li>\\n<li>بررسی و یکپارچه‌سازی استایل کدها قبل از هر کامیت</li>\\n<li>یکپارچه‌سازی عنوان و متن کامیت‌ها</li>\\n<li>ساخت نسخه‌های مختلف برای پلتفرم‌های مختلف</li>\\n<li>بهینه‌سازی نسخه‌ها</li>\\n<li>انتشار نسخه‌ها</li>\\n<li>تهیه مستندات</li>\\n<li>انتشار مستندات</li>\\n<li>تعیین شماره نسخه بعدی نرم‌افزار طبق <a href=\\\"https://semver.org\\\">semver</a></li>\\n<li>ضمیمه تغییرات هر نسخه به همراه commit مربوطه، issue مربوطه و …</li>\\n<li>و الی ماشالله</li>\\n</ul>\\n<p><img src=\\\"/etc-722330625a8a4793c08b5695efab52d0.gif\\\" alt=\\\"etc\\\"></p>\\n<p>خبر بد اینه که باید به task runner بفهمونید چه کارهایی انجام بده\\nو این خودش مستلزم کانفیگ پلاگین‌ها و ابزارهای دیگه‌ایه\\nکه اگر نگم انرژی‌ای که ازتون می‌گیره\\nبیشتر از توسعه خود ماژول نیست،\\nکم‌تر هم نیست.</p>\\n<p>و خبر خوب اینکه\\n<a href=\\\"https://github.com/alexjoverm/typescript-library-starter\\\">typescript-library-starter</a>\\nاین کانفیگ‌ها رو براتون انجام داده.\\nمن در ادامه پست با این boilerplate کار می‌کنم،\\nتا با هم کانفیگ‌ها رو دور بزنیم،\\nو روی ابزارهای مورد نیازمون تمرکز کنیم.\\nطبیعتا وقتی کاربرد این ابزارها رو یاد بگیرید،\\nدیگه محدود به این boilerplate نخواهید بود\\nو می‌تونید بر حسب نیاز از این ابزارها در پروژه‌های دیگه استفاده بکنید یا نکنید.</p>\\n<p><strong>سلب مسئولیت: کانفیگ‌ها در جاواسکریپت به سمت تموم شدن میل می‌کنن، ولی تموم نمی‌شن.</strong></p>\\n<p>اما چرا تایپ‌اسکریپت؟\\nمگه عنوان پست <strong>ایجاد ماژول‌های جاواسکریپت</strong> نبود؟\\nخب این سه تا علت داره:</p>\\n<ul>\\n<li>\\n<p>اول اینکه خدعه کردم.</p>\\n</li>\\n<li>\\n<p>دوم اینکه بنده از این جاواسکریپت خیلی بدم میاد.</p>\\n</li>\\n<li>\\n<p>و در آخر اینکه خب تایپ‌اسکریپت همون جاواسکریپت سروسامون‌یافته‌تر هست.\\nمنتها به خاطر استاتیک‌تایپ بودنش\\nIDE ها می‌تونن با نمایش پیشنهادها و نوع پارامترهای مجاز،\\nدر روند توسعه کمک‌تون کنند،\\nکه خود این مسئله منجر به کاهش خطاها در زمان اجرا،\\nساختار منطقی‌تر، کدهای خواناتر و نگهداری ساده‌تر میشه.\\nجدای از تمام برتری‌های فنی،\\nبرنامه‌نویسی با تایپ‌اسکریپت لذت‌بخش‌تر هم هست.\\nپس اگر یک هفته برای یادگیری تایپ‌اسکریپت کنار بذارید،\\nبه خودتون،\\nسایر مشارکت‌کننده‌ها،\\nتوسعه‌دهنده‌هایی که از کتابخا‌نه‌تون استفاده می‌کنند،\\nو جامعه بشریت کمک بزرگی کردید.</p>\\n</li>\\n</ul>\\n<h2>راه‌اندازی پروژه</h2>\\n<ul>\\n<li>\\n<p>اول به\\n<a href=\\\"https://github.com/new\\\">اینجا</a>\\nبرید و یه مخزن جدید بسازید.\\nبهتره نام مخزن بصورت <code class=\\\"language-text\\\">kebab-case.js</code> باشه.</p>\\n</li>\\n<li>\\n<p>دستورهای زیر رو به ترتیب اجرا کنید،\\nو وقتی ازتون نام پروژه پرسیده شد،\\nپسوند <code class=\\\"language-text\\\">js</code> رو وارد نکنید:</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">git clone https://github.com/alexjoverm/typescript-library-starter.git YOUR_REPOSITORY\\ncd YOUR_REPOSITORY\\nnpm install\\ngit remote set-url origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git</code></pre>\\n      </div>\\n<ul>\\n<li>الان می‌تونید اولین کامیت خودتون رو ثبت کنید.\\nولی با یه راه باحال‌تر اینکار رو انجام بدید:</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">git add .\\nnpm run commit</code></pre>\\n      </div>\\n<p>  سوال اول مربوط به نوع تغییرات هست.</p>\\n<p>  سوال دوم از شما می‌خواد مشخص کنید که این تغییرات مرتبط با کدوم فرآیند، پلتفرم، وابستگی،‌ کامپوننت یا … پروژه‌ست.</p>\\n<p>  سوال سوم و چهارم به ترتیب شرح خلاصه و مفصل تغییرات شماست.</p>\\n<p>  سوال پنجم مربوط به\\n<a href=\\\"https://en.wiktionary.org/wiki/breaking_change\\\">breaking change</a>\\nهای پروژه‌ست.\\nتغییراتی که در این کامیت منجر به ناسازگاری با نسخه‌های قبلی شده‌اند رو شرح بدید.\\nاما اگر\\n<a href=\\\"https://fa.wikipedia.org/wiki/%D8%B3%D8%A7%D8%B2%DA%AF%D8%A7%D8%B1%DB%8C_%D8%B9%D9%82%D8%A8%D8%B1%D9%88\\\">backward compatible</a>\\nبود جوابش رو ندید.</p>\\n<p>  و در سوال آخر اگر این کامیت برای بستن issue خاصی ثبت می‌شه\\nشماره issue مربوطه رو با فرمت مثلا <code class=\\\"language-text\\\">#64</code> ذکر کنید.</p>\\n<p>  حالا ببینید محتوای کامیت تولید شده چی هست:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">git log</code></pre>\\n      </div>\\n<p>  از این به بعد کامیت‌های شما و بقیه مشارکت‌کننده‌ها استایل مشترکی خواهند داشت.\\nو شاید باورتون نشه، ولی این کمترین کاری هست که\\n<a href=\\\"http://commitizen.github.io/cz-cli/\\\"><code class=\\\"language-text\\\">commitizen</code></a>\\nداره براتون انجام می‌ده.\\nبا وظیفه مهم‌ترش وقتی آشنا می‌شید،\\nکه <code class=\\\"language-text\\\">semantic-release</code> آماده به کار شده باشه.\\nپس اندکی صبر، اون قسمتش نزدیکست.</p>\\n<ul>\\n<li>\\n<p><a href=\\\"https://semantic-release.gitbooks.io/semantic-release/\\\"><code class=\\\"language-text\\\">semantic-release</code></a>\\nکامیت‌های منتشرنشده پروژه شما رو می‌خونه،\\nطبق مقادیری که ‍‍<code class=\\\"language-text\\\">commitizen</code> به کمک\\n<a href=\\\"https://github.com/conventional-changelog/conventional-changelog\\\"><code class=\\\"language-text\\\">conventional-changelog</code></a>\\nبه متن این کامیت‌ها اضافه کرده،\\nتغییرات <code class=\\\"language-text\\\">major</code> و <code class=\\\"language-text\\\">manor</code> و <code class=\\\"language-text\\\">patch</code> رو تشخیص می‌ده،\\nگزارش تغییرات نسخه جدید رو آماده می‌کنه،\\nو در آخر نتیجه رو نشونتون می‌ده.</p>\\n<p>این بود وظیفه مهم‌تر <code class=\\\"language-text\\\">commitizen</code>.</p>\\n</li>\\n</ul>\\n<p><img src=\\\"/setup-933c145ddbb62713d32afb8cf0de4de6.gif\\\" alt=\\\"setup\\\"></p>\\n<p>  از اونجایی که برای استفاده از\\n<code class=\\\"language-text\\\">semantic-release</code>\\nو انتشار مستندات\\nباید آدرس مخزن پروژه تعریف شده باشه،\\nفایل <code class=\\\"language-text\\\">package.json</code> رو باز کنید و در قسمت <code class=\\\"language-text\\\">git.url</code> آدرس\\n<code class=\\\"language-text\\\">https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git</code>\\nرو وارد کنید.</p>\\n<p>  اگر از ویندوز استفاده می‌کنید، قبل از دستورهای بعدی این دستور رو اجرا کنید:\\n(من امکان تست این مورد رو نداشتم و صرفا چون در\\n<a href=\\\"https://github.com/alexjoverm/typescript-library-starter#automatic-releases\\\">مستندات</a>\\nذکر شده بود، این رو اضافه کردم)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm install --global --production windows-build-tools</code></pre>\\n      </div>\\n<p>  دستورات زیر رو به ترتیب اجرا کنید (حتی شما یونیکسی عزیز)،\\nو وقتی ازتون پرسید <code class=\\\"language-text\\\">travis.yml</code> رو ایجاد کنه یا نه،\\n<code class=\\\"language-text\\\">NO</code> رو انتخاب کنید، چون زحمت کانفیگ این فایل از قبل کشیده شده.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm run semantic-release-prepare\\nnpm install -g semantic-release-cli\\nsemantic-release-cli setup</code></pre>\\n      </div>\\n<p>  با دستور اول دو تا <code class=\\\"language-text\\\">git hook</code> جدید به لیست اسکریپت‌های <code class=\\\"language-text\\\">package.json</code> اضافه می‌شن.\\n<code class=\\\"language-text\\\">prepush</code> که قبل از هر پوش صحت build و پوشش تست‌ها و استایل کدها رو بررسی می‌کنه\\nتا ضمانت کنه تغییرات شما منجر به fail شدن فرآیند ساخت نمی‌شه،\\nو <code class=\\\"language-text\\\">commitmsg</code> که به شما اجازه اجرای <code class=\\\"language-text\\\">git commit</code> رو نمی‌ده و\\nبه جاش <code class=\\\"language-text\\\">npm run commit</code> رو بهتون پیشنهاد می‌ده.</p>\\n<ul>\\n<li>\\n<p><a href=\\\"https://travis-ci.org/\\\">Travis CI</a>\\nابزاری برای خودکارسازی فرآیندهای\\nتست، ساخت و انتشار پروژه هست.\\nبرای فعال‌سازی CI پروژه\\n<a href=\\\"https://travis-ci.org/profile/\\\">اینجا</a>\\nبرید و سوییچ مخزن‌تون رو روشن کنید.</p>\\n<p>بعد به\\n<a href=\\\"https://github.com/settings/tokens\\\">اینجا</a>\\nبرید و یک توکن جدید ایجاد کنید.\\nدقت کنید که در قسمت <code class=\\\"language-text\\\">Select scopes</code> حتما <code class=\\\"language-text\\\">repo</code> و مشتقاتش انتخاب شده باشند.\\nاین توکن دیگه به شما نشون داده نمی‌شه،\\nپس در حفظ و نگهداری توکن کوشا باشید و اون رو در جایی امن نگه‌داری کنید.\\nطبیعتا این جای امن داخل پروژه نخواهد بود.</p>\\n<p>برای فعالسازی <code class=\\\"language-text\\\">semantic-release</code> به یه توکن <code class=\\\"language-text\\\">npm</code> هم نیاز دارید.\\nاگر هنوز عضو سایت <code class=\\\"language-text\\\">npm</code> نیستید از\\n<a href=\\\"https://www.npmjs.com/signup\\\">اینجا</a>\\nمی‌تونید ثبت‌نام کنید.\\nبعد دستور زیر رو اجرا کنید\\nو برای توکن ایجاد شده، همون مواردی که برای توکن گیت‌هاب اشاره کردم رو عینا رعایت کنید.</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm token create</code></pre>\\n      </div>\\n<p>  بعد به آدرس\\n<code class=\\\"language-text\\\">https://travis-ci.org/YOUR_USERNAME/YOUR_REPOSITORY/settings</code>\\nبرید و در قسمت <code class=\\\"language-text\\\">Environment Variables</code>\\nمقدار توکن گیت‌هاب رو با عنوان <code class=\\\"language-text\\\">GH_TOKEN</code> به لیست متغیرها اضافه کنید.\\nهمین کار رو مجددا برای توکن <code class=\\\"language-text\\\">npm</code> و این‌بار با عنوان <code class=\\\"language-text\\\">NPM_TOKEN</code> تکرار کنید.\\nحواستون باشه سوییچ ‍‍‍<code class=\\\"language-text\\\">Display value in build log</code> در هر دو مورد خاموش باشه،\\nچرا که درغیراینصورت اون حفظ و نگه‌داری‌ای که بهش اشاره شد به طور کامل نقض می‌شه.</p>\\n<p>  از این به بعد با هربار push و pull request،\\nتراویس وظایفی که در <code class=\\\"language-text\\\">travis.yml</code> تعریف شده رو براتون انجام می‌ده،\\nکارهایی مثل تست و به‌روزرسانی coverage و مستندات پروژه.\\nاگر نیاز بود وظایف دیگه‌ای هم به این لیست اضافه شه، به\\n<a href=\\\"https://docs.travis-ci.com/\\\">مستندات تراویس</a>\\nمراجعه کنید.</p>\\n<p>  برای اینکه نتیجه آخرین اجرای CI هم همیشه در معرض دید باشه،\\nبهتره که برچسب build رو به <code class=\\\"language-text\\\">README.md</code> پروژه اضافه کنید:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token title important\\\"><span class=\\\"token punctuation\\\">#</span> PROJECT_NAME</span>\\n\\n[![Build Status](https://travis-ci.org/YOUR<span class=\\\"token italic\\\"><span class=\\\"token punctuation\\\">_</span>USERNAME/YOUR<span class=\\\"token punctuation\\\">_</span></span>REPOSITORY.svg?branch=master)](https://travis-ci.org/YOUR<span class=\\\"token italic\\\"><span class=\\\"token punctuation\\\">_</span>USERNAME/YOUR<span class=\\\"token punctuation\\\">_</span></span>REPOSITORY)\\n</code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p><code class=\\\"language-text\\\">coveralls</code> هم ابزاری برای رصد کردن کیفیت کلی پروژه هست،\\nو برای پروژه‌های متن‌باز رایگانه.\\nاگر هنوز عضو سایتش نیستید، از\\n<a href=\\\"https://coveralls.io/sign-up\\\">اینجا</a>\\nمی‌تونید ثبت‌نام کنید.</p>\\n<p>برای فعال‌سازی coverage پروژه\\n<a href=\\\"https://coveralls.io/repos/new\\\">اینجا</a>\\nبرید و سوییچ مخزن نگهدارنده پروژه رو روشن کنید.</p>\\n<p>و در آخر به برچسب build که در قدم قبلی به <code class=\\\"language-text\\\">README.md</code> اضافه کردید،\\nبرچسب coverage رو هم اضافه کنید:</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">[![Coverage Status](https://coveralls.io/repos/github/YOUR<span class=\\\"token italic\\\"><span class=\\\"token punctuation\\\">_</span>USERNAME/YOUR<span class=\\\"token punctuation\\\">_</span></span>REPOSITORY/badge.svg?branch=master)](https://coveralls.io/github/YOUR<span class=\\\"token italic\\\"><span class=\\\"token punctuation\\\">_</span>USERNAME/YOUR<span class=\\\"token punctuation\\\">_</span></span>REPOSITORY?branch=master)\\n</code></pre>\\n      </div>\\n<ul>\\n<li>اگر به ویژگی‌های فانکشنال مثل <code class=\\\"language-text\\\">Promise</code> در کتابخانه‌تون نیاز داشتید،\\nمی‌تونید از <code class=\\\"language-text\\\">polyfill</code> هایی مثل\\n<a href=\\\"https://github.com/zloirock/core-js\\\"><code class=\\\"language-text\\\">core-js</code></a>\\nاستفاده کنید. برای نصب دستور زیر رو اجرا کنید:</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm i -D core-js</code></pre>\\n      </div>\\n<p>  و برای استفاده بالای <code class=\\\"language-text\\\">entry script</code> (فایلی که برنامه از اون شروع می‌شه) کتابخانه،\\n<code class=\\\"language-text\\\">polyfill</code> های مورد نیازتون رو <code class=\\\"language-text\\\">import</code> کنید:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"core-js/fn/array/find\\\"</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"core-js/fn/string/includes\\\"</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token string\\\">\\\"core-js/fn/promise\\\"</span>\\n</code></pre>\\n      </div>\\n<h2>چند تا نکته</h2>\\n<ul>\\n<li>\\n<p>به آدرس <code class=\\\"language-text\\\">https://YOUR_USERNAME.github.io/YOUR_REPOSITORY</code> برید\\nو از دیدن مستنداتی که\\n<a href=\\\"http://typedoc.org/\\\"><code class=\\\"language-text\\\">typedoc</code></a>\\nبراتون ایجاد کرده لذت ببرید.</p>\\n</li>\\n<li>\\n<p>اگر کتابخانه شما وابسته به ماژولی از نوع <code class=\\\"language-text\\\">peerDependeny</code>\\n(ماژولی که لازم نیست در خروجی نهایی <code class=\\\"language-text\\\">import</code> بشه)\\nبود،\\nفایل <code class=\\\"language-text\\\">rollup.config.js</code> رو باز کنید و نام اون ماژول رو به آرایه <code class=\\\"language-text\\\">external</code> اضافه کنید.</p>\\n</li>\\n<li>\\n<p>تا می‌تونید از نصب وابستگی‌های پروژه به صورت <code class=\\\"language-text\\\">global</code> پرهیز کنید،\\nو کامندهای مرتبط با هر ماژول رو به <code class=\\\"language-text\\\">npm scripts</code> اضافه کنید،\\nاینجوری مشارکت برای سایر توسعه‌دهنده‌ها راحت‌تر می‌شه.</p>\\n</li>\\n</ul>\\n<h2>انتشار کتابخانه</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-command\\\"><code class=\\\"language-command\\\">npm publish</code></pre>\\n      </div>\\n<p><img src=\\\"/publish-9c5b49646e9365d80fb154f571043eb8.gif\\\" alt=\\\"publish\\\"></p>\",\"frontmatter\":{\"title\":\"ایجاد ماژول‌های جاواسکریپت\",\"date\":\"June 02, 2018\"}}},\"pathContext\":{\"slug\":\"/create-js-module/\",\"previous\":{\"fields\":{\"slug\":\"/hello-world/\"},\"frontmatter\":{\"title\":\"سلام دنیا!\"}},\"next\":false}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/create-js-module.json\n// module id = 509\n// module chunks = 127523925242981"],"sourceRoot":""}